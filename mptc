#!/usr/bin/env python3

import argparse
import sys
from copy import copy
from os.path import abspath

from config import vamos_common_PYTHONPATH

sys.path.append(vamos_common_PYTHONPATH)

from vamos_mpt.codegen.codegen import CodeGenCpp
from vamos_common.codegen.events import CodeGenCpp as EventsCodeGen
from vamos_common.codegen.traces import CodeGenCpp as TracesCodeGen
from vamos_mpt.parser.parser import Parser


def dbg(msg):
    print(f"\033[0;34m[dbg]: {msg}\033[0m", file=sys.stderr)

def errmsg(msg):
    print(f"\033[0;31m[err]: {msg}\033[0m", file=sys.stderr)


def main(args):
    ctx = None

    vamos_compatible=False

    ### Parse the event source specification if given and generate the sources
    if args.sources_def:
        if not vamos_compatible:
            raise NotImplementedError("The integration with VAMOS is not working yet.")

        dbg("Generating event sources")
        from config import vamos_sources_PYTHONPATH

        if not vamos_sources_PYTHONPATH:
            raise RuntimeError(f"The project was not configured with vamos-sources.")

        sys.path.append(vamos_sources_PYTHONPATH)
        from vamos_sources.spec.parser.parser import InlineSpecParser as SrcParser
        from vamos_sources.codegen.cpp.codegen import CodeGenCpp as SrcCodeGenCpp

        src_parser = SrcParser()
        src_ast, ctx = src_parser.parse_path(args.sources_def)
        src_args = copy(args)
        src_codegen = SrcCodeGenCpp(src_args, ctx)
        src_codegen.generate(src_ast)
        dbg("event sources generated")
        dbg(f"ctx: {ctx}")
        ctx.dump()

    ### Parse MPT
    dbg("Parsing MPT's spec")
    parser = Parser(ctx)
    ast, base = parser.parse_path(args.input_mpt)
    mpt = base.mpt
    # this is the up-to-date context
    ctx = parser.ctx

    if not ctx.eventdecls:
        errmsg("Have no declarations of events, "
               "events must be declard either as a part of the MPT's spec,"
               "or as a part of the sources spec.")
        ctx.dump()
        sys.exit(1)

    if args.sources_def:
        # these files were generated by the source codegen
        args.add_gen_files.append("src.cpp")
        args.add_gen_files.append("inputs.cpp")

        # do not overwrite what the source codegen generated
        args.out_dir_overwrite = False

    dbg("Generating MPT")
    codegen = CodeGenCpp(args, ctx)
    codegen.generate(mpt)
    dbg("MPT generated")

    # do not overwrite the generated files so far
    args.out_dir_overwrite = False

    dbg("Generating events")
    assert args.out_dir_overwrite is False
    events_codegen = EventsCodeGen(args, ctx, vamos_compatible)
    events_codegen.generate(mpt.alphabet)
    dbg("DONE generating events")

    dbg("Generating traces classes")
    assert args.out_dir_overwrite is False
    assert ctx is not None
    traces_codegen = TracesCodeGen(args, ctx)
    traces_codegen.generate(ctx.tracetypes, ctx.hypertracetypes, mpt.alphabet)
    dbg("DONE generating traces")

    # mpt.todot()
    # print(ast.pretty())


def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "inputs", nargs="+", help="Input files (.mpt, .vsrc, additional C++ files"
    )
    parser.add_argument(
        "--out-dir",
        action="store",
        default="/tmp/mpt",
        help="Output directory (default: /tmp/mpt)",
    )
    parser.add_argument(
        "--out-dir-overwrite",
        action="store",
        default=True,
        help="Overwrite the contents of the output dir if it exists (default: True)",
    )
    parser.add_argument(
        "--build-type", action="store", help="Force build _type for the CMake project"
    )
    parser.add_argument("--debug", action="store_true", help="Debugging mode")
    parser.add_argument(
        "--exit-on-error", action="store_true", help="Stop when a violation is found"
    )
    parser.add_argument(
        "--verbose", "-v", action="store_true", help="Print more messages"
    )
    parser.add_argument("--stats", action="store_true", help="Gather statistics")
    parser.add_argument(
        "-D", action="append", default=[], help="Additional CMake definitions"
    )
    parser.add_argument(
        "--reduction",
        action="append",
        default=[],
        choices=["symmetry", "reflexivity"],
        help="Do not process pairs reflexive and symmetric pairs of  traces",
    )
    parser.add_argument(
        "--overwrite-file",
        action="append",
        default=[],
        help="Do not generate the default version of the given file, its replacement is assumed to be "
        "provided as an additional source.",
    )
    args = parser.parse_args()

    args.input_mpt = None
    args.cpp_files = []
    args.add_gen_files = []
    args.sources_def = None
    args.cmake_defs = args.D
    for fl in args.inputs:
        if fl.endswith(".mpt"):
            if args.input_mpt:
                raise RuntimeError("Multiple .mpt files given")
            args.input_mpt = fl
        elif (
            fl.endswith(".cpp")
            or fl.endswith(".h")
            or fl.endswith(".hpp")
            or fl.endswith(".cxx")
            or fl.endswith("cc")
        ):
            args.cpp_files.append(abspath(fl))
        elif fl.endswith(".vsrc"):
            if args.sources_def:
                raise RuntimeError("Multiple .vsrc files given")
            args.sources_def = fl

    print(args)

    return args


if __name__ == "__main__":
    args = parse_arguments()
    main(args)
