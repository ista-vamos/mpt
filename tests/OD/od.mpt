Event InputL, OutputL, Write {
  addr : UInt64,
  x    : Int32
}

mpt OD {
  -- could be also t1, ..., t2: [InputL, OutputL];
  in t1 : [InputL, OutputL, Write], t2: [InputL, OutputL, Write];
  -- OutputL can be either a single value or a trace of values
  out o : Bool;

  -- initial state
  init q0;

  q0 -> q0 {
    t1: _*e1@{InputL + OutputL};
    t2: _*e2@{InputL + OutputL};
    cond: t1[e1] == t2[e2];
    out: true;
  }
  q0 -> q1 {
    t1: _*e1@{OutputL + $};
    t2: _*e2@{OutputL + $};
    cond: t1[e1] != t2[e2];
    out: false;
  }
  q0 -> q2 {
    t1: _*e1@{InputL + $};
    t2: _*e2@{InputL + $};
    cond: t1[e1] != t2[e2];
    out: true;
  }
}

-- sources {
--   foreach file in @common.listendir($arg1) {
--     t = new [InputL, OutputL];
--     foreach line in @reader.csv(file, sep=" ") {
--       yield InputL(line[2], line[3]) to t;
--     }
--   }
-- }
