start: (eventdecl | mptdef )+

eventdecl: "Event" (name | namelist) fieldsdecl [";"]
           | "Event" (name | namelist) ";"
fieldsdecl: "{" datafield ("," datafield)* "}" | "{" "}"
datafield: name typeannot


mptdef: "mpt" NAME? "{" inputs outs [initstate] transitions "}"
inputs: "in" tracedecl (", " tracedecl)* ";"
tracedecl: tracevar [typeannot]
outs: "out" tracedecl (", " tracedecl)* ";"
initstate: "init" state ";"

transitions: transition+
transition: state "->" state "{" (matchstmt ";")+ [condition] [out] "}"
matchstmt: tracevar ":" prefixexpr
condition: "cond" ":" boolexpr ";"
out: "out" ":" (eventpattern | "true" | "false" )+ ";"
tracevar: name
state: name

%import types.typeannot
%import expr.boolexpr
%import comm.name
%import comm.namelist
%import prefixexpr.eventpattern
%import prefixexpr.prefixexpr

%import common.CNAME -> NAME
%import common.WS_INLINE
%import common.WS
COMMENT: "--" /[^\n]/*

%ignore COMMENT
%ignore WS